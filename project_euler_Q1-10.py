'''There is no copyright on this script'''
'''Editor : Tonggih (Dong gi) Kang '''
# Project Euler : https://projecteuler.net/
import time
from datetime import timedelta

def start_time_measure(message=None):
    if message:
        print(message)
    return time.monotonic()

def end_time_measure(start_time, print_prefix=None):
    end_time = time.monotonic()
    if print_prefix:
        print(print_prefix + str(timedelta(seconds=end_time - start_time)))
    return end_time


q1 = '\nQ1 - Multiples of 3 and 5'
print(q1)
total_start_time = start_time_measure()
start_time = start_time_measure('Calculating...')
total_sum = 0
for i in range(1, 1000):
    if (i % 3 == 0 or i % 5 == 0):
        total_sum = total_sum + i
print (total_sum)
end_time_measure(start_time, 'Done in: ')
###########################################################################
q2 = '\nQ2 - Even Fibonacci numbers'
print(q2)
start_time = start_time_measure('Calculating...')
tot = 0
a = 1
b = 1
c = 0
result = 0

while c < 4000000:
    c = (a+b)
    if c % 2 == 0:
        result = result + c
    a = b
    b = c
print(result)
end_time_measure(start_time, 'Done in: ')
###########################################################################
q3 = '\nQ3 - Largest prime factor'
print(q3)
start_time = start_time_measure('Calculating...')
n = 600851475143
i = 2
while i * i < n:
    while n % i == 0:
        n = n / i
    i = i + 1


print(f'The largest prime factor is : {int(n)}')
end_time_measure(start_time, 'Done in: ')

        #for j in prime_fac:     # among the numbers that can divide the number
        #    if prime_fac[-1] != j:  # for the number that is not identical to the largest prime factor of the number
        #        while prime_fac[-1] != 0:
                    #if prime_fac[-1] / j in prime_fac and prime_fac[-1] / j != prime_fac[-1]:
        #            print(f'The largest prime factor is {prime_fac[-2]}')
        #            print(f'list of the prime factors are {prime_fac[0:-1]}')
        #            end_time_measure(start_time, 'Done in: ')
        #            break

###########################################################################
q4 = '\nQ4 - Largest palindrome product'
print(q4)
start_time = start_time_measure('Calculating...')
three_n = range(100, 999)

palindromic_number = []
for n in three_n:
    for nn in three_n:
        number = str(n*nn)
        list_num = [a for i, a in enumerate(number)]

        half = int(len(list_num)/2)
        if half == 3:
            front = list_num[0: half]
            back = list_num[half: ]
            front_int = list(map(int, front))
            back_int = list(map(int, back))
            back_int.reverse()
            if front_int == back_int:
                palindromic_number.append(int(number))

palindromic_number.sort()
print(f'The largest palindromic number that can be generated by multiplying two three is : {palindromic_number[-1]}')
count_palin = len(palindromic_number)
print(f'All of the palindromic number which produced with two three digit numbers are listed above (Total {count_palin})')
#print(f'The largest number that  : {divide_with}')
end_time_measure(start_time, 'Done in: ')
###########################################################################
q5 = '\nQ5 - Smallest multiple 최소공배수'
print(q5)

'''2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20? '''
start_time = start_time_measure('Calculating...')
from functools import reduce

prime = []
product = 1
for num in range(1,21):
    if all(num%i!=0 for i in range(2,num)):
        prime.append(num)
        product = product * num
print(f'prime numbers that are under 20 are {prime}')
#print(product)

def lcm(*values):
    values = [value for value in values]
    #print(values)
    if values:
        n  = max(values)
        m = n
        values.remove(n)
        while any( n % value for value in values ):
            n += m
        return n
    return 0

print(reduce(lcm, range(1,21)))
lcm(20)


# Method 2
#from math  import gcd
#def lcm(a,b):
#    "Calculate the lowest common multiple of two integers a and b"
#    return a*b//gcd(a,b)

#print(reduce(lcm, range(1,20+1)))



# Method 3
#list_ = []
#for i in range(2,21):
#    list_.append(i)     #list_ = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 ,19, 20]

#for i in range(0, len(list_)):  # i = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
#    for j in range(1, i+1):     # j = [1], j = [1, 2], j = [0, 1, 2, 3], j = [0, ... , 18]
#        if list_[i] % list_[i-j] == 0:  # 2%2,
#            list_[i] = int(list_[i] / list_[i-j])

#answer = 1
#for i in range(0, len(list_)):
#    answer = answer * list_[i]

#print(answer)
end_time_measure(start_time, 'Done in: ')
################################################################################
q6 = '\nQ6 - Sum square difference'
print(q6)

list_num = range(1,101)

product = 0
product_2 = 0
for i in list_num:
    product = product + i**2
    #print(f'The sum of the sqaures : {product}, the square of individual element : {i**2}, the individual element : {i}')

    product_2 = product_2 + i

print(f'The sum of the squares up to {list_num[-1]} is : {product}')
print(f'The square of the sum up to {list_num[-1]} is : {product_2**2}')
answer = abs(product - product_2**2)
print(f'The difference of the two values is : {answer}')
end_time_measure(start_time, 'Done in: ')
################################################################################
q7 = '\nQ7 - 10001st prime'
print(q7)
start_time = start_time_measure('Calculating...')

def infinity():
    i = 1
    while True:
        i += 1
        yield i

# gradually list up all the prime numbers and count the number of elements in the list (expensive calc)
'''
prime = []
for num in infinity():
    if all(num % i != 0 for i in range(2, num)):
        prime.append(num)
        #print(len(prime))
        if len(prime) == 10001:
            print(prime[-1])
            break
'''

# Using the property of the prime number which prime number is ""not"" divisible by /
# the numbers that are in the range(2, sqrt(prime_no)+1)
def prime_checker(n):
    nums_to_check = range(2, int(n**.5) + 1)        # n**.5 = sqrt(n)
    for i in nums_to_check:
        if n % i == 0:
            return False
    return True     # return True if parameter n is a prime number, False if composite and "nor composite" if neither

def prime_at_index(idx):
    no_of_primes = 1
    n = 2
    while no_of_primes < idx:
        n += 1
        if prime_checker(n):     # if is_prime(n) is True
            no_of_primes += 1   # index + 1
    return n

print(prime_at_index(10001))
end_time_measure(start_time, 'Done in: ')
################################################################################
q8 = "\nQ8 - Largest product in a series"
print(q8)
start_time = start_time_measure('Calculating...')

digits_1000 = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"
gap = 13

product_collection = []
for i in range(0, len(digits_1000)-gap+1):
    consec_no = digits_1000[i: i+gap]

    digits = [int(x) for x in consec_no]    # convert a number into list of single digits

    product = 1
    for i in digits:
        product = product * i
        product_collection.append(product)

product_collection.sort()
print(f'The largest number that you could get from multiplying the thirteen consecutive digits in the lsit is : {product_collection[-1]}')
end_time_measure(start_time, 'Done in: ')
################################################################################
q9 = '\nQ9 - Special Pythagorean triplet'
print(q9)

for a in range(1, 1000):
    for b in range(a, 1000 - a):
        c = 1000 - a - b
        if c < b or c < a:
            break
        else:
            if c**2 == a**2 + b**2 and a + b + c == 1000:
                print(f'a,b,c are : {a}, {b}, {c}')
                print(f'product of abc is {a*b*c}')

end_time_measure(start_time, 'Done in: ')
################################################################################
q10 = '\nQ10 - Summation of primes'
print(q10)
start_time = start_time_measure('Calculating...')

def sum_primes_to_limit(limit):
    i = 2
    now = []
    total = 0
    for i in range(2,lim+1):
        for x in range(1,int(i**.5)+1):
            if len(now) ==2:
                break
            elif i % x == 0:
                now.append(x)

        if len(now) == 1:
            total += i
        now = []
    return(total)

print(sum_primes_to_limit(2000000))

end_time_measure(start_time, 'Done in: ')
end_time_measure(total_start_time, '\nTotal time: ')
